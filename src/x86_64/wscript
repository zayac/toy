def options(opt):
    grp = opt.add_option_group('run options (x86_64)')
    grp.add_option('-t', action='store_true', default=False, dest='term',
                   help='redirect output into terminal')
    grp.add_option('--kvm', action='store_true', default=False, dest='kvm',
                   help='run kernel using KVM')


def configure(cnf):
    cnf.find_program('objcopy')
    cnf.find_program('xorriso')
    cnf.find_program('grub-mkrescue')
    cnf.find_program('qemu-system-x86_64')
    cnf.find_program('screen', mandatory=False)
    cnf.find_program('kvm', mandatory=False)

    cnf.env.append_value('CXXFLAGS', '-m64')
    cnf.env.append_value('LDFLAGS', '-Wl,-T %s/kernel.lds' %cnf.path.abspath())
    cnf.env.append_value('LDFLAGS', ['-Wl,-z', '-Wl,max-page-size=0x1'])


def build(bld):
    env = bld.env.derive()
    env.CXXFLAGS = ['-m32' if f == '-m64' else f for f in env.CXXFLAGS]
    boot32 = bld.objects(source='boot32.cc', target='boot32.o', env=env)
    boot32.post()

    bld(rule='objcopy -O elf64-x86-64 ${SRC} ${TGT}',
        source=boot32.tasks[0].outputs[0], target='boot32_64.o',
        name='boot32 elf32->elf64')

    objects = bld.objects(
        source=bld.path.ant_glob('**/*.cc', excl='boot32.cc'))
    objects.post()

    source = ['boot32_64.o'] + [t.outputs[0] for t in objects.tasks]
    bld(rule='${CXX} ${LDFLAGS} ${SRC} -o ${TGT}', source=source,
        target='kernel.bin', name='link kernel')


def run(run):
    build(run)

    boot = run.path.get_bld().make_node('iso/boot')
    config = boot.make_node('grub/grub.cfg')
    kernel = boot.make_node('toy.bin')

    run(rule='cp ${SRC} ${TGT}', source='grub.cfg', target=config)
    run(rule='cp ${SRC} ${TGT}', source='kernel.bin', target=kernel)
    run(rule='grub-mkrescue -o ${TGT} --diet %s' % boot.parent.abspath(),
        source=[config, kernel], target='toy.iso')

    options = '' if run.options.kvm else '-no-kvm'

    rule = 'qemu-system-x86_64 -cdrom ${SRC} -boot d %s' % options
    if run.options.term: rule = 'screen %s -curses' % rule
    run(rule=rule, source='toy.iso', name='running kernel', always=True)
